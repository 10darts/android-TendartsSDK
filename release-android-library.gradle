apply plugin: 'maven'
apply plugin: 'signing'


def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION
def pomDescription = "10 Darts Android SDK"
def licenseName = 'MIT License'
def licenseUrl = 'https://github.com/onpublico/android-sdk/blob/master/license.txt'
def pomUrl = 'https://10darts.com/'
def pomPackaging ='aar'
def scmUrl = 'https://github.com/onpublico/android-sdk'
def scmConnection ='scm:git:https://github.com/10darts/android-sdk'
def scmDevConn ='scm:git:https://github.com/10darts/android-sdk'
def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
def releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'


def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        // Add other pom properties here if you want (developer details / licenses)

        repository(url: releaseUrl) { authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)  }

        snapshotRepository(url: snapshotUrl) {
            authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
        }

        pom.project{
            name groupId
            packaging pomPackaging
            description pomDescription
            url pomUrl
            licenses{
                license{
                    name licenseName
                    url licenseUrl
                    distribution 'repo'
                }

            }
            developers{
                developer{
                    id '10Darts'
                    name 'Jorge Arimany'
                }
            }
            scm {
                url scmUrl
                connection scmConnection
                developerConnection scmDevConn
            }

        }
    }

    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")

        //repository(url: releaseUrl) { authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)  }

        snapshotRepository(url: snapshotUrl) {
            authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
        }

        pom.project{
            name groupId
            packaging pomPackaging
            description pomDescription
            url pomUrl
            licenses{
                license{
                    name licenseName
                    url licenseUrl
                    distribution 'repo'
                }

            }
            developers{
                developer{
                    id '10Darts'
                    name 'Jorge Arimany'
                }
            }
            scm {
                url scmUrl
                connection scmConnection
                developerConnection scmDevConn
            }

        }
    }
}



task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

task generateRelease {
    doLast {
        println "Release ${version} can be found at ${localReleaseDest}/"
        println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
    }
}



signing {


    //required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}




generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)



artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

//run ../gradlew clean build generateRelese
//uploadArchives